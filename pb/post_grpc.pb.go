// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: post.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SocialMediaService_PostStream_FullMethodName   = "/pb.SocialMediaService/PostStream"
	SocialMediaService_CreatePost_FullMethodName   = "/pb.SocialMediaService/CreatePost"
	SocialMediaService_LiveComments_FullMethodName = "/pb.SocialMediaService/LiveComments"
)

// SocialMediaServiceClient is the client API for SocialMediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialMediaServiceClient interface {
	PostStream(ctx context.Context, opts ...grpc.CallOption) (SocialMediaService_PostStreamClient, error)
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	// Bidirectional streaming RPC for live comments on a post
	LiveComments(ctx context.Context, opts ...grpc.CallOption) (SocialMediaService_LiveCommentsClient, error)
}

type socialMediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialMediaServiceClient(cc grpc.ClientConnInterface) SocialMediaServiceClient {
	return &socialMediaServiceClient{cc}
}

func (c *socialMediaServiceClient) PostStream(ctx context.Context, opts ...grpc.CallOption) (SocialMediaService_PostStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SocialMediaService_ServiceDesc.Streams[0], SocialMediaService_PostStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &socialMediaServicePostStreamClient{stream}
	return x, nil
}

type SocialMediaService_PostStreamClient interface {
	Send(*Post) error
	Recv() (*Post, error)
	grpc.ClientStream
}

type socialMediaServicePostStreamClient struct {
	grpc.ClientStream
}

func (x *socialMediaServicePostStreamClient) Send(m *Post) error {
	return x.ClientStream.SendMsg(m)
}

func (x *socialMediaServicePostStreamClient) Recv() (*Post, error) {
	m := new(Post)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *socialMediaServiceClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, SocialMediaService_CreatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaServiceClient) LiveComments(ctx context.Context, opts ...grpc.CallOption) (SocialMediaService_LiveCommentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SocialMediaService_ServiceDesc.Streams[1], SocialMediaService_LiveComments_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &socialMediaServiceLiveCommentsClient{stream}
	return x, nil
}

type SocialMediaService_LiveCommentsClient interface {
	Send(*Comment) error
	Recv() (*Comment, error)
	grpc.ClientStream
}

type socialMediaServiceLiveCommentsClient struct {
	grpc.ClientStream
}

func (x *socialMediaServiceLiveCommentsClient) Send(m *Comment) error {
	return x.ClientStream.SendMsg(m)
}

func (x *socialMediaServiceLiveCommentsClient) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SocialMediaServiceServer is the server API for SocialMediaService service.
// All implementations must embed UnimplementedSocialMediaServiceServer
// for forward compatibility
type SocialMediaServiceServer interface {
	PostStream(SocialMediaService_PostStreamServer) error
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	// Bidirectional streaming RPC for live comments on a post
	LiveComments(SocialMediaService_LiveCommentsServer) error
	mustEmbedUnimplementedSocialMediaServiceServer()
}

// UnimplementedSocialMediaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSocialMediaServiceServer struct {
}

func (UnimplementedSocialMediaServiceServer) PostStream(SocialMediaService_PostStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PostStream not implemented")
}
func (UnimplementedSocialMediaServiceServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedSocialMediaServiceServer) LiveComments(SocialMediaService_LiveCommentsServer) error {
	return status.Errorf(codes.Unimplemented, "method LiveComments not implemented")
}
func (UnimplementedSocialMediaServiceServer) mustEmbedUnimplementedSocialMediaServiceServer() {}

// UnsafeSocialMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialMediaServiceServer will
// result in compilation errors.
type UnsafeSocialMediaServiceServer interface {
	mustEmbedUnimplementedSocialMediaServiceServer()
}

func RegisterSocialMediaServiceServer(s grpc.ServiceRegistrar, srv SocialMediaServiceServer) {
	s.RegisterService(&SocialMediaService_ServiceDesc, srv)
}

func _SocialMediaService_PostStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SocialMediaServiceServer).PostStream(&socialMediaServicePostStreamServer{stream})
}

type SocialMediaService_PostStreamServer interface {
	Send(*Post) error
	Recv() (*Post, error)
	grpc.ServerStream
}

type socialMediaServicePostStreamServer struct {
	grpc.ServerStream
}

func (x *socialMediaServicePostStreamServer) Send(m *Post) error {
	return x.ServerStream.SendMsg(m)
}

func (x *socialMediaServicePostStreamServer) Recv() (*Post, error) {
	m := new(Post)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SocialMediaService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMediaService_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServiceServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMediaService_LiveComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SocialMediaServiceServer).LiveComments(&socialMediaServiceLiveCommentsServer{stream})
}

type SocialMediaService_LiveCommentsServer interface {
	Send(*Comment) error
	Recv() (*Comment, error)
	grpc.ServerStream
}

type socialMediaServiceLiveCommentsServer struct {
	grpc.ServerStream
}

func (x *socialMediaServiceLiveCommentsServer) Send(m *Comment) error {
	return x.ServerStream.SendMsg(m)
}

func (x *socialMediaServiceLiveCommentsServer) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SocialMediaService_ServiceDesc is the grpc.ServiceDesc for SocialMediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialMediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SocialMediaService",
	HandlerType: (*SocialMediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _SocialMediaService_CreatePost_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PostStream",
			Handler:       _SocialMediaService_PostStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "LiveComments",
			Handler:       _SocialMediaService_LiveComments_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "post.proto",
}
