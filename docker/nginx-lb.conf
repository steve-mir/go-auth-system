# NGINX Load Balancer Configuration for go-auth-system

upstream go_auth_backend {
    # Load balancing method
    least_conn;
    
    # Backend servers
    server auth-instance-1:8080 max_fails=3 fail_timeout=30s weight=1;
    server auth-instance-2:8080 max_fails=3 fail_timeout=30s weight=1;
    server auth-instance-3:8080 max_fails=3 fail_timeout=30s weight=1;
    
    # Health check (requires nginx-plus or custom module)
    # health_check uri=/health/ready interval=10s fails=3 passes=2;
    
    # Keepalive connections
    keepalive 32;
}

upstream go_auth_grpc_backend {
    # Load balancing method for gRPC
    least_conn;
    
    # Backend servers for gRPC
    server auth-instance-1:9090 max_fails=3 fail_timeout=30s weight=1;
    server auth-instance-2:9090 max_fails=3 fail_timeout=30s weight=1;
    server auth-instance-3:9090 max_fails=3 fail_timeout=30s weight=1;
    
    # Keepalive connections
    keepalive 32;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=login_limit:10m rate=5r/s;
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# Caching zones
proxy_cache_path /var/cache/nginx/auth levels=1:2 keys_zone=auth_cache:10m max_size=100m inactive=60m use_temp_path=off;

server {
    listen 80;
    listen [::]:80;
    server_name auth.example.com;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name auth.example.com;
    
    # SSL Configuration
    ssl_certificate /etc/ssl/certs/auth.example.com.crt;
    ssl_certificate_key /etc/ssl/private/auth.example.com.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Connection limits
    limit_conn conn_limit 20;
    
    # Health check endpoints (bypass rate limiting)
    location ~ ^/health/(live|ready)$ {
        access_log off;
        proxy_pass http://go_auth_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Health check specific settings
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    }
    
    # Metrics endpoint (internal only)
    location /metrics {
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        proxy_pass http://go_auth_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Authentication endpoints with stricter rate limiting
    location ~ ^/api/v1/auth/(login|register)$ {
        limit_req zone=login_limit burst=10 nodelay;
        
        proxy_pass http://go_auth_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Disable caching for auth endpoints
        proxy_cache off;
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        
        # Timeout settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    }
    
    # General API endpoints
    location /api/ {
        limit_req zone=auth_limit burst=20 nodelay;
        
        proxy_pass http://go_auth_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Caching for read-only endpoints
        proxy_cache auth_cache;
        proxy_cache_valid 200 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        proxy_cache_bypass $http_cache_control;
        add_header X-Cache-Status $upstream_cache_status;
        
        # Timeout settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    }
    
    # Admin dashboard
    location /admin/ {
        # Restrict access to admin networks
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        limit_req zone=auth_limit burst=10 nodelay;
        
        proxy_pass http://go_auth_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # No caching for admin
        proxy_cache off;
        proxy_no_cache 1;
        proxy_cache_bypass 1;
    }
    
    # Default location
    location / {
        limit_req zone=auth_limit burst=15 nodelay;
        
        proxy_pass http://go_auth_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Basic caching
        proxy_cache auth_cache;
        proxy_cache_valid 200 2m;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        
        # Timeout settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    }
}

# gRPC Load Balancer
server {
    listen 9090 ssl http2;
    listen [::]:9090 ssl http2;
    server_name auth-grpc.example.com;
    
    # SSL Configuration (same as above)
    ssl_certificate /etc/ssl/certs/auth.example.com.crt;
    ssl_certificate_key /etc/ssl/private/auth.example.com.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # gRPC specific settings
    grpc_read_timeout 300s;
    grpc_send_timeout 300s;
    client_body_timeout 300s;
    client_header_timeout 300s;
    
    location / {
        grpc_pass grpc://go_auth_grpc_backend;
        grpc_set_header Host $host;
        grpc_set_header X-Real-IP $remote_addr;
        grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        grpc_set_header X-Forwarded-Proto $scheme;
        
        # Error handling
        error_page 502 = /error502grpc;
    }
    
    location = /error502grpc {
        internal;
        default_type application/grpc;
        add_header grpc-status 14;
        add_header grpc-message "Service temporarily unavailable";
        return 204;
    }
}

# Status page for monitoring
server {
    listen 8080;
    listen [::]:8080;
    server_name localhost;
    
    # Allow only internal access
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    
    location /nginx_status {
        stub_status on;
        access_log off;
    }
    
    location /upstream_status {
        # Custom upstream status (requires additional module)
        # upstream_status;
        access_log off;
    }
}