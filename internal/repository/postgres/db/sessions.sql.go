// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: sessions.sql

package db

import (
	"context"
	"net/netip"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countUserSessions = `-- name: CountUserSessions :one
SELECT COUNT(*) FROM user_sessions 
WHERE user_id = $1 AND expires_at > NOW()
`

func (q *Queries) CountUserSessions(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countUserSessions, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO user_sessions (
    user_id, token_hash, token_type, expires_at, ip_address, user_agent
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, token_hash, token_type, expires_at, created_at, last_used_at, ip_address, user_agent
`

type CreateSessionParams struct {
	UserID    uuid.UUID        `db:"user_id" json:"user_id"`
	TokenHash string           `db:"token_hash" json:"token_hash"`
	TokenType string           `db:"token_type" json:"token_type"`
	ExpiresAt pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	IpAddress *netip.Addr      `db:"ip_address" json:"ip_address"`
	UserAgent pgtype.Text      `db:"user_agent" json:"user_agent"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.TokenHash,
		arg.TokenType,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.TokenType,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec

DELETE FROM user_sessions WHERE expires_at < NOW()
`

// -- name: DeleteUserSessions :exec
// DELETE FROM user_sessions WHERE user_id = $1;
func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredSessions)
	return err
}

const deleteSessionByTokenHash = `-- name: DeleteSessionByTokenHash :exec

DELETE FROM user_sessions WHERE token_hash = $1
`

// -- name: DeleteSession :exec
// DELETE FROM user_sessions WHERE id = $1;
func (q *Queries) DeleteSessionByTokenHash(ctx context.Context, tokenHash string) error {
	_, err := q.db.Exec(ctx, deleteSessionByTokenHash, tokenHash)
	return err
}

const getSessionByTokenHash = `-- name: GetSessionByTokenHash :one
SELECT id, user_id, token_hash, token_type, expires_at, created_at, last_used_at, ip_address, user_agent FROM user_sessions WHERE token_hash = $1
`

func (q *Queries) GetSessionByTokenHash(ctx context.Context, tokenHash string) (UserSession, error) {
	row := q.db.QueryRow(ctx, getSessionByTokenHash, tokenHash)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.TokenType,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const getSessionsForCleanup = `-- name: GetSessionsForCleanup :many
SELECT id, token_hash FROM user_sessions 
WHERE expires_at < NOW()
LIMIT $1
`

type GetSessionsForCleanupRow struct {
	ID        uuid.UUID `db:"id" json:"id"`
	TokenHash string    `db:"token_hash" json:"token_hash"`
}

func (q *Queries) GetSessionsForCleanup(ctx context.Context, limit int32) ([]GetSessionsForCleanupRow, error) {
	rows, err := q.db.Query(ctx, getSessionsForCleanup, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSessionsForCleanupRow{}
	for rows.Next() {
		var i GetSessionsForCleanupRow
		if err := rows.Scan(&i.ID, &i.TokenHash); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionLastUsed = `-- name: UpdateSessionLastUsed :exec


UPDATE user_sessions SET
    last_used_at = NOW()
WHERE id = $1
`

// -- name: GetSessionByID :one
// SELECT * FROM user_sessions WHERE id = $1;
// -- name: GetUserSessions :many
// SELECT * FROM user_sessions
// WHERE user_id = $1 AND expires_at > NOW()
// ORDER BY created_at DESC
// LIMIT $2 OFFSET $3;
func (q *Queries) UpdateSessionLastUsed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateSessionLastUsed, id)
	return err
}
