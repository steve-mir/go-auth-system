// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: roles.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const assignRoleToUser = `-- name: AssignRoleToUser :exec
INSERT INTO user_roles (user_id, role_id, assigned_by)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, role_id) DO NOTHING
`

type AssignRoleToUserParams struct {
	UserID     uuid.UUID   `db:"user_id" json:"user_id"`
	RoleID     uuid.UUID   `db:"role_id" json:"role_id"`
	AssignedBy pgtype.UUID `db:"assigned_by" json:"assigned_by"`
}

func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.Exec(ctx, assignRoleToUser, arg.UserID, arg.RoleID, arg.AssignedBy)
	return err
}

const countRoles = `-- name: CountRoles :one
SELECT COUNT(*) FROM roles
`

func (q *Queries) CountRoles(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countRoles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name, description, permissions)
VALUES ($1, $2, $3)
RETURNING id, name, description, permissions, created_at, updated_at
`

type CreateRoleParams struct {
	Name        string          `db:"name" json:"name"`
	Description pgtype.Text     `db:"description" json:"description"`
	Permissions json.RawMessage `db:"permissions" json:"permissions"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.Name, arg.Description, arg.Permissions)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, name, description, permissions, created_at, updated_at FROM roles WHERE id = $1
`

func (q *Queries) GetRoleByID(ctx context.Context, id uuid.UUID) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name, description, permissions, created_at, updated_at FROM roles WHERE name = $1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleUsers = `-- name: GetRoleUsers :many
SELECT u.id, u.email, u.username, u.password_hash, u.hash_algorithm, u.first_name_encrypted, u.last_name_encrypted, u.phone_encrypted, u.email_verified, u.phone_verified, u.account_locked, u.failed_login_attempts, u.last_login_at, u.created_at, u.updated_at FROM users u
JOIN user_roles ur ON u.id = ur.user_id
WHERE ur.role_id = $1
ORDER BY u.created_at DESC
`

func (q *Queries) GetRoleUsers(ctx context.Context, roleID uuid.UUID) ([]User, error) {
	rows, err := q.db.Query(ctx, getRoleUsers, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.PasswordHash,
			&i.HashAlgorithm,
			&i.FirstNameEncrypted,
			&i.LastNameEncrypted,
			&i.PhoneEncrypted,
			&i.EmailVerified,
			&i.PhoneVerified,
			&i.AccountLocked,
			&i.FailedLoginAttempts,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT r.id, r.name, r.description, r.permissions, r.created_at, r.updated_at FROM roles r
JOIN user_roles ur ON r.id = ur.role_id
WHERE ur.user_id = $1
ORDER BY r.name ASC
`

func (q *Queries) GetUserRoles(ctx context.Context, userID uuid.UUID) ([]Role, error) {
	rows, err := q.db.Query(ctx, getUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Permissions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoles = `-- name: ListRoles :many
SELECT id, name, description, permissions, created_at, updated_at FROM roles
ORDER BY name ASC
LIMIT $1 OFFSET $2
`

type ListRolesParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Permissions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeRoleFromUser = `-- name: RemoveRoleFromUser :exec
DELETE FROM user_roles
WHERE user_id = $1 AND role_id = $2
`

type RemoveRoleFromUserParams struct {
	UserID uuid.UUID `db:"user_id" json:"user_id"`
	RoleID uuid.UUID `db:"role_id" json:"role_id"`
}

func (q *Queries) RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error {
	_, err := q.db.Exec(ctx, removeRoleFromUser, arg.UserID, arg.RoleID)
	return err
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles SET
    name = COALESCE($2, name),
    description = COALESCE($3, description),
    permissions = COALESCE($4, permissions),
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, permissions, created_at, updated_at
`

type UpdateRoleParams struct {
	ID          uuid.UUID       `db:"id" json:"id"`
	Name        string          `db:"name" json:"name"`
	Description pgtype.Text     `db:"description" json:"description"`
	Permissions json.RawMessage `db:"permissions" json:"permissions"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Permissions,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
