// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: audit.sql

package db

import (
	"context"
	"encoding/json"
	"net/netip"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countAuditLogs = `-- name: CountAuditLogs :one
SELECT COUNT(*) FROM audit_logs
`

func (q *Queries) CountAuditLogs(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAuditLogs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAuditLogsByAction = `-- name: CountAuditLogsByAction :one
SELECT COUNT(*) FROM audit_logs WHERE action = $1
`

func (q *Queries) CountAuditLogsByAction(ctx context.Context, action string) (int64, error) {
	row := q.db.QueryRow(ctx, countAuditLogsByAction, action)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserAuditLogs = `-- name: CountUserAuditLogs :one
SELECT COUNT(*) FROM audit_logs WHERE user_id = $1
`

func (q *Queries) CountUserAuditLogs(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countUserAuditLogs, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAuditLog = `-- name: CreateAuditLog :one
INSERT INTO audit_logs (
    user_id, action, resource_type, resource_id, ip_address, user_agent, metadata
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, action, resource_type, resource_id, ip_address, user_agent, metadata, timestamp
`

type CreateAuditLogParams struct {
	UserID       uuid.UUID       `db:"user_id" json:"user_id"`
	Action       string          `db:"action" json:"action"`
	ResourceType pgtype.Text     `db:"resource_type" json:"resource_type"`
	ResourceID   pgtype.Text     `db:"resource_id" json:"resource_id"`
	IpAddress    *netip.Addr     `db:"ip_address" json:"ip_address"`
	UserAgent    pgtype.Text     `db:"user_agent" json:"user_agent"`
	Metadata     json.RawMessage `db:"metadata" json:"metadata"`
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AuditLog, error) {
	row := q.db.QueryRow(ctx, createAuditLog,
		arg.UserID,
		arg.Action,
		arg.ResourceType,
		arg.ResourceID,
		arg.IpAddress,
		arg.UserAgent,
		arg.Metadata,
	)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.ResourceType,
		&i.ResourceID,
		&i.IpAddress,
		&i.UserAgent,
		&i.Metadata,
		&i.Timestamp,
	)
	return i, err
}

const deleteOldAuditLogs = `-- name: DeleteOldAuditLogs :exec
DELETE FROM audit_logs 
WHERE timestamp < $1
`

func (q *Queries) DeleteOldAuditLogs(ctx context.Context, timestamp pgtype.Timestamp) error {
	_, err := q.db.Exec(ctx, deleteOldAuditLogs, timestamp)
	return err
}

const getAuditLogByID = `-- name: GetAuditLogByID :one
SELECT id, user_id, action, resource_type, resource_id, ip_address, user_agent, metadata, timestamp FROM audit_logs WHERE id = $1
`

func (q *Queries) GetAuditLogByID(ctx context.Context, id uuid.UUID) (AuditLog, error) {
	row := q.db.QueryRow(ctx, getAuditLogByID, id)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.ResourceType,
		&i.ResourceID,
		&i.IpAddress,
		&i.UserAgent,
		&i.Metadata,
		&i.Timestamp,
	)
	return i, err
}

const getAuditLogsByAction = `-- name: GetAuditLogsByAction :many
SELECT id, user_id, action, resource_type, resource_id, ip_address, user_agent, metadata, timestamp FROM audit_logs 
WHERE action = $1
ORDER BY timestamp DESC
LIMIT $2 OFFSET $3
`

type GetAuditLogsByActionParams struct {
	Action string `db:"action" json:"action"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

func (q *Queries) GetAuditLogsByAction(ctx context.Context, arg GetAuditLogsByActionParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByAction, arg.Action, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Metadata,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByResource = `-- name: GetAuditLogsByResource :many
SELECT id, user_id, action, resource_type, resource_id, ip_address, user_agent, metadata, timestamp FROM audit_logs 
WHERE resource_type = $1 AND resource_id = $2
ORDER BY timestamp DESC
LIMIT $3 OFFSET $4
`

type GetAuditLogsByResourceParams struct {
	ResourceType pgtype.Text `db:"resource_type" json:"resource_type"`
	ResourceID   pgtype.Text `db:"resource_id" json:"resource_id"`
	Limit        int32       `db:"limit" json:"limit"`
	Offset       int32       `db:"offset" json:"offset"`
}

func (q *Queries) GetAuditLogsByResource(ctx context.Context, arg GetAuditLogsByResourceParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByResource,
		arg.ResourceType,
		arg.ResourceID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Metadata,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByTimeRange = `-- name: GetAuditLogsByTimeRange :many
SELECT id, user_id, action, resource_type, resource_id, ip_address, user_agent, metadata, timestamp FROM audit_logs 
WHERE timestamp >= $1 AND timestamp <= $2
ORDER BY timestamp DESC
LIMIT $3 OFFSET $4
`

type GetAuditLogsByTimeRangeParams struct {
	Timestamp   pgtype.Timestamp `db:"timestamp" json:"timestamp"`
	Timestamp_2 pgtype.Timestamp `db:"timestamp_2" json:"timestamp_2"`
	Limit       int32            `db:"limit" json:"limit"`
	Offset      int32            `db:"offset" json:"offset"`
}

func (q *Queries) GetAuditLogsByTimeRange(ctx context.Context, arg GetAuditLogsByTimeRangeParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByTimeRange,
		arg.Timestamp,
		arg.Timestamp_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Metadata,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByUserAndAction = `-- name: GetAuditLogsByUserAndAction :many
SELECT id, user_id, action, resource_type, resource_id, ip_address, user_agent, metadata, timestamp FROM audit_logs 
WHERE user_id = $1 AND action = $2
ORDER BY timestamp DESC
LIMIT $3 OFFSET $4
`

type GetAuditLogsByUserAndActionParams struct {
	UserID uuid.UUID `db:"user_id" json:"user_id"`
	Action string    `db:"action" json:"action"`
	Limit  int32     `db:"limit" json:"limit"`
	Offset int32     `db:"offset" json:"offset"`
}

func (q *Queries) GetAuditLogsByUserAndAction(ctx context.Context, arg GetAuditLogsByUserAndActionParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByUserAndAction,
		arg.UserID,
		arg.Action,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Metadata,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentAuditLogs = `-- name: GetRecentAuditLogs :many
SELECT id, user_id, action, resource_type, resource_id, ip_address, user_agent, metadata, timestamp FROM audit_logs 
ORDER BY timestamp DESC
LIMIT $1 OFFSET $2
`

type GetRecentAuditLogsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetRecentAuditLogs(ctx context.Context, arg GetRecentAuditLogsParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getRecentAuditLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Metadata,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAuditLogs = `-- name: GetUserAuditLogs :many
SELECT id, user_id, action, resource_type, resource_id, ip_address, user_agent, metadata, timestamp FROM audit_logs 
WHERE user_id = $1
ORDER BY timestamp DESC
LIMIT $2 OFFSET $3
`

type GetUserAuditLogsParams struct {
	UserID uuid.UUID `db:"user_id" json:"user_id"`
	Limit  int32     `db:"limit" json:"limit"`
	Offset int32     `db:"offset" json:"offset"`
}

func (q *Queries) GetUserAuditLogs(ctx context.Context, arg GetUserAuditLogsParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getUserAuditLogs, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Metadata,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
