// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: admin_sessions.sql

package db

import (
	"context"
	"net/netip"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const cleanupExpiredSessions = `-- name: CleanupExpiredSessions :exec
DELETE FROM user_sessions WHERE expires_at <= NOW()
`

func (q *Queries) CleanupExpiredSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanupExpiredSessions)
	return err
}

const countAllSessions = `-- name: CountAllSessions :one
SELECT COUNT(*)
FROM user_sessions s
JOIN users u ON s.user_id = u.id
WHERE ($1::uuid IS NULL OR s.user_id = $1)
`

func (q *Queries) CountAllSessions(ctx context.Context, dollar_1 pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countAllSessions, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM user_sessions WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const deleteUserSessions = `-- name: DeleteUserSessions :exec
DELETE FROM user_sessions WHERE user_id = $1
`

func (q *Queries) DeleteUserSessions(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserSessions, userID)
	return err
}

const getActiveSessionsCount = `-- name: GetActiveSessionsCount :one
SELECT COUNT(*) FROM user_sessions WHERE expires_at > NOW()
`

func (q *Queries) GetActiveSessionsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getActiveSessionsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllSessions = `-- name: GetAllSessions :many
SELECT 
    s.id, s.user_id, u.email, s.ip_address, s.user_agent,
    s.created_at, s.last_used_at, s.expires_at, s.token_type,
    CASE WHEN s.expires_at > NOW() THEN true ELSE false END as is_active
FROM user_sessions s
JOIN users u ON s.user_id = u.id
WHERE ($1::uuid IS NULL OR s.user_id = $1)
ORDER BY 
    CASE WHEN $2 = 'created_at' THEN s.created_at END,
    CASE WHEN $2 = 'last_used_at' THEN s.last_used_at END,
    CASE WHEN $2 = 'expires_at' THEN s.expires_at END,
    CASE WHEN $2 = 'user_email' THEN u.email END
LIMIT $3 OFFSET $4
`

type GetAllSessionsParams struct {
	Column1 pgtype.UUID `db:"column_1" json:"column_1"`
	Column2 interface{} `db:"column_2" json:"column_2"`
	Limit   int32       `db:"limit" json:"limit"`
	Offset  int32       `db:"offset" json:"offset"`
}

type GetAllSessionsRow struct {
	ID         uuid.UUID        `db:"id" json:"id"`
	UserID     uuid.UUID        `db:"user_id" json:"user_id"`
	Email      string           `db:"email" json:"email"`
	IpAddress  *netip.Addr      `db:"ip_address" json:"ip_address"`
	UserAgent  pgtype.Text      `db:"user_agent" json:"user_agent"`
	CreatedAt  pgtype.Timestamp `db:"created_at" json:"created_at"`
	LastUsedAt pgtype.Timestamp `db:"last_used_at" json:"last_used_at"`
	ExpiresAt  pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	TokenType  string           `db:"token_type" json:"token_type"`
	IsActive   bool             `db:"is_active" json:"is_active"`
}

func (q *Queries) GetAllSessions(ctx context.Context, arg GetAllSessionsParams) ([]GetAllSessionsRow, error) {
	rows, err := q.db.Query(ctx, getAllSessions,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllSessionsRow{}
	for rows.Next() {
		var i GetAllSessionsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Email,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
			&i.LastUsedAt,
			&i.ExpiresAt,
			&i.TokenType,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT 
    s.id, s.user_id, u.email, s.ip_address, s.user_agent,
    s.created_at, s.last_used_at, s.expires_at, s.token_type,
    CASE WHEN s.expires_at > NOW() THEN true ELSE false END as is_active
FROM user_sessions s
JOIN users u ON s.user_id = u.id
WHERE s.id = $1
`

type GetSessionByIDRow struct {
	ID         uuid.UUID        `db:"id" json:"id"`
	UserID     uuid.UUID        `db:"user_id" json:"user_id"`
	Email      string           `db:"email" json:"email"`
	IpAddress  *netip.Addr      `db:"ip_address" json:"ip_address"`
	UserAgent  pgtype.Text      `db:"user_agent" json:"user_agent"`
	CreatedAt  pgtype.Timestamp `db:"created_at" json:"created_at"`
	LastUsedAt pgtype.Timestamp `db:"last_used_at" json:"last_used_at"`
	ExpiresAt  pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	TokenType  string           `db:"token_type" json:"token_type"`
	IsActive   bool             `db:"is_active" json:"is_active"`
}

func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (GetSessionByIDRow, error) {
	row := q.db.QueryRow(ctx, getSessionByID, id)
	var i GetSessionByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.ExpiresAt,
		&i.TokenType,
		&i.IsActive,
	)
	return i, err
}

const getUserSessions = `-- name: GetUserSessions :many
SELECT 
    s.id, s.user_id, u.email, s.ip_address, s.user_agent,
    s.created_at, s.last_used_at, s.expires_at, s.token_type,
    CASE WHEN s.expires_at > NOW() THEN true ELSE false END as is_active
FROM user_sessions s
JOIN users u ON s.user_id = u.id
WHERE s.user_id = $1
ORDER BY s.created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserSessionsParams struct {
	UserID uuid.UUID `db:"user_id" json:"user_id"`
	Limit  int32     `db:"limit" json:"limit"`
	Offset int32     `db:"offset" json:"offset"`
}

type GetUserSessionsRow struct {
	ID         uuid.UUID        `db:"id" json:"id"`
	UserID     uuid.UUID        `db:"user_id" json:"user_id"`
	Email      string           `db:"email" json:"email"`
	IpAddress  *netip.Addr      `db:"ip_address" json:"ip_address"`
	UserAgent  pgtype.Text      `db:"user_agent" json:"user_agent"`
	CreatedAt  pgtype.Timestamp `db:"created_at" json:"created_at"`
	LastUsedAt pgtype.Timestamp `db:"last_used_at" json:"last_used_at"`
	ExpiresAt  pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	TokenType  string           `db:"token_type" json:"token_type"`
	IsActive   bool             `db:"is_active" json:"is_active"`
}

func (q *Queries) GetUserSessions(ctx context.Context, arg GetUserSessionsParams) ([]GetUserSessionsRow, error) {
	rows, err := q.db.Query(ctx, getUserSessions, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserSessionsRow{}
	for rows.Next() {
		var i GetUserSessionsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Email,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
			&i.LastUsedAt,
			&i.ExpiresAt,
			&i.TokenType,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
