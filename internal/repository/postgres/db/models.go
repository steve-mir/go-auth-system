// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package db

import (
	"encoding/json"
	"net/netip"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Alert struct {
	ID         uuid.UUID        `db:"id" json:"id"`
	Type       string           `db:"type" json:"type"`
	Severity   string           `db:"severity" json:"severity"`
	Title      string           `db:"title" json:"title"`
	Message    string           `db:"message" json:"message"`
	Source     string           `db:"source" json:"source"`
	Metadata   json.RawMessage  `db:"metadata" json:"metadata"`
	CreatedAt  pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	ResolvedAt pgtype.Timestamp `db:"resolved_at" json:"resolved_at"`
	IsActive   pgtype.Bool      `db:"is_active" json:"is_active"`
	IsResolved pgtype.Bool      `db:"is_resolved" json:"is_resolved"`
}

type AuditLog struct {
	ID           uuid.UUID        `db:"id" json:"id"`
	UserID       uuid.UUID        `db:"user_id" json:"user_id"`
	Action       string           `db:"action" json:"action"`
	ResourceType pgtype.Text      `db:"resource_type" json:"resource_type"`
	ResourceID   pgtype.Text      `db:"resource_id" json:"resource_id"`
	IpAddress    *netip.Addr      `db:"ip_address" json:"ip_address"`
	UserAgent    pgtype.Text      `db:"user_agent" json:"user_agent"`
	Metadata     json.RawMessage  `db:"metadata" json:"metadata"`
	Timestamp    pgtype.Timestamp `db:"timestamp" json:"timestamp"`
}

type NotificationSetting struct {
	ID              uuid.UUID        `db:"id" json:"id"`
	EmailEnabled    pgtype.Bool      `db:"email_enabled" json:"email_enabled"`
	EmailRecipients []string         `db:"email_recipients" json:"email_recipients"`
	SlackEnabled    pgtype.Bool      `db:"slack_enabled" json:"slack_enabled"`
	SlackWebhook    pgtype.Text      `db:"slack_webhook" json:"slack_webhook"`
	SmsEnabled      pgtype.Bool      `db:"sms_enabled" json:"sms_enabled"`
	SmsRecipients   []string         `db:"sms_recipients" json:"sms_recipients"`
	Thresholds      []byte           `db:"thresholds" json:"thresholds"`
	CreatedAt       pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type Role struct {
	ID          uuid.UUID        `db:"id" json:"id"`
	Name        string           `db:"name" json:"name"`
	Description pgtype.Text      `db:"description" json:"description"`
	Permissions json.RawMessage  `db:"permissions" json:"permissions"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type SocialAccount struct {
	ID           uuid.UUID        `db:"id" json:"id"`
	UserID       uuid.UUID        `db:"user_id" json:"user_id"`
	Provider     string           `db:"provider" json:"provider"`
	SocialID     string           `db:"social_id" json:"social_id"`
	Email        pgtype.Text      `db:"email" json:"email"`
	Name         pgtype.Text      `db:"name" json:"name"`
	AccessToken  pgtype.Text      `db:"access_token" json:"access_token"`
	RefreshToken pgtype.Text      `db:"refresh_token" json:"refresh_token"`
	ExpiresAt    pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	Metadata     json.RawMessage  `db:"metadata" json:"metadata"`
	CreatedAt    pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt    pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type User struct {
	ID                  uuid.UUID        `db:"id" json:"id"`
	Email               string           `db:"email" json:"email"`
	Username            pgtype.Text      `db:"username" json:"username"`
	PasswordHash        string           `db:"password_hash" json:"password_hash"`
	HashAlgorithm       string           `db:"hash_algorithm" json:"hash_algorithm"`
	FirstNameEncrypted  []byte           `db:"first_name_encrypted" json:"first_name_encrypted"`
	LastNameEncrypted   []byte           `db:"last_name_encrypted" json:"last_name_encrypted"`
	PhoneEncrypted      []byte           `db:"phone_encrypted" json:"phone_encrypted"`
	EmailVerified       pgtype.Bool      `db:"email_verified" json:"email_verified"`
	PhoneVerified       pgtype.Bool      `db:"phone_verified" json:"phone_verified"`
	AccountLocked       pgtype.Bool      `db:"account_locked" json:"account_locked"`
	FailedLoginAttempts pgtype.Int4      `db:"failed_login_attempts" json:"failed_login_attempts"`
	LastLoginAt         pgtype.Timestamp `db:"last_login_at" json:"last_login_at"`
	CreatedAt           pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt           pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type UserMfa struct {
	ID                   uuid.UUID        `db:"id" json:"id"`
	UserID               uuid.UUID        `db:"user_id" json:"user_id"`
	Method               string           `db:"method" json:"method"`
	SecretEncrypted      []byte           `db:"secret_encrypted" json:"secret_encrypted"`
	BackupCodesEncrypted []byte           `db:"backup_codes_encrypted" json:"backup_codes_encrypted"`
	Enabled              pgtype.Bool      `db:"enabled" json:"enabled"`
	CreatedAt            pgtype.Timestamp `db:"created_at" json:"created_at"`
	LastUsedAt           pgtype.Timestamp `db:"last_used_at" json:"last_used_at"`
}

type UserRole struct {
	UserID     uuid.UUID        `db:"user_id" json:"user_id"`
	RoleID     uuid.UUID        `db:"role_id" json:"role_id"`
	AssignedAt pgtype.Timestamp `db:"assigned_at" json:"assigned_at"`
	AssignedBy pgtype.UUID      `db:"assigned_by" json:"assigned_by"`
}

type UserSession struct {
	ID         uuid.UUID        `db:"id" json:"id"`
	UserID     uuid.UUID        `db:"user_id" json:"user_id"`
	TokenHash  string           `db:"token_hash" json:"token_hash"`
	TokenType  string           `db:"token_type" json:"token_type"`
	ExpiresAt  pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	CreatedAt  pgtype.Timestamp `db:"created_at" json:"created_at"`
	LastUsedAt pgtype.Timestamp `db:"last_used_at" json:"last_used_at"`
	IpAddress  *netip.Addr      `db:"ip_address" json:"ip_address"`
	UserAgent  pgtype.Text      `db:"user_agent" json:"user_agent"`
}
