// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email, username, password_hash, hash_algorithm, 
    first_name_encrypted, last_name_encrypted, phone_encrypted
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, email, username, password_hash, hash_algorithm, first_name_encrypted, last_name_encrypted, phone_encrypted, email_verified, phone_verified, account_locked, failed_login_attempts, last_login_at, created_at, updated_at
`

type CreateUserParams struct {
	Email              string      `db:"email" json:"email"`
	Username           pgtype.Text `db:"username" json:"username"`
	PasswordHash       string      `db:"password_hash" json:"password_hash"`
	HashAlgorithm      string      `db:"hash_algorithm" json:"hash_algorithm"`
	FirstNameEncrypted []byte      `db:"first_name_encrypted" json:"first_name_encrypted"`
	LastNameEncrypted  []byte      `db:"last_name_encrypted" json:"last_name_encrypted"`
	PhoneEncrypted     []byte      `db:"phone_encrypted" json:"phone_encrypted"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
		arg.HashAlgorithm,
		arg.FirstNameEncrypted,
		arg.LastNameEncrypted,
		arg.PhoneEncrypted,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.HashAlgorithm,
		&i.FirstNameEncrypted,
		&i.LastNameEncrypted,
		&i.PhoneEncrypted,
		&i.EmailVerified,
		&i.PhoneVerified,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, password_hash, hash_algorithm, first_name_encrypted, last_name_encrypted, phone_encrypted, email_verified, phone_verified, account_locked, failed_login_attempts, last_login_at, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.HashAlgorithm,
		&i.FirstNameEncrypted,
		&i.LastNameEncrypted,
		&i.PhoneEncrypted,
		&i.EmailVerified,
		&i.PhoneVerified,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, username, password_hash, hash_algorithm, first_name_encrypted, last_name_encrypted, phone_encrypted, email_verified, phone_verified, account_locked, failed_login_attempts, last_login_at, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.HashAlgorithm,
		&i.FirstNameEncrypted,
		&i.LastNameEncrypted,
		&i.PhoneEncrypted,
		&i.EmailVerified,
		&i.PhoneVerified,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, username, password_hash, hash_algorithm, first_name_encrypted, last_name_encrypted, phone_encrypted, email_verified, phone_verified, account_locked, failed_login_attempts, last_login_at, created_at, updated_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.HashAlgorithm,
		&i.FirstNameEncrypted,
		&i.LastNameEncrypted,
		&i.PhoneEncrypted,
		&i.EmailVerified,
		&i.PhoneVerified,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsersByRole = `-- name: GetUsersByRole :many
SELECT u.id, u.email, u.username, u.password_hash, u.hash_algorithm, u.first_name_encrypted, u.last_name_encrypted, u.phone_encrypted, u.email_verified, u.phone_verified, u.account_locked, u.failed_login_attempts, u.last_login_at, u.created_at, u.updated_at FROM users u
JOIN user_roles ur ON u.id = ur.user_id
JOIN roles r ON ur.role_id = r.id
WHERE r.name = $1
ORDER BY u.created_at DESC
`

func (q *Queries) GetUsersByRole(ctx context.Context, name string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByRole, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.PasswordHash,
			&i.HashAlgorithm,
			&i.FirstNameEncrypted,
			&i.LastNameEncrypted,
			&i.PhoneEncrypted,
			&i.EmailVerified,
			&i.PhoneVerified,
			&i.AccountLocked,
			&i.FailedLoginAttempts,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, username, password_hash, hash_algorithm, first_name_encrypted, last_name_encrypted, phone_encrypted, email_verified, phone_verified, account_locked, failed_login_attempts, last_login_at, created_at, updated_at FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.PasswordHash,
			&i.HashAlgorithm,
			&i.FirstNameEncrypted,
			&i.LastNameEncrypted,
			&i.PhoneEncrypted,
			&i.EmailVerified,
			&i.PhoneVerified,
			&i.AccountLocked,
			&i.FailedLoginAttempts,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    email = COALESCE($2, email),
    username = COALESCE($3, username),
    password_hash = COALESCE($4, password_hash),
    hash_algorithm = COALESCE($5, hash_algorithm),
    first_name_encrypted = COALESCE($6, first_name_encrypted),
    last_name_encrypted = COALESCE($7, last_name_encrypted),
    phone_encrypted = COALESCE($8, phone_encrypted),
    email_verified = COALESCE($9, email_verified),
    phone_verified = COALESCE($10, phone_verified),
    updated_at = NOW()
WHERE id = $1
RETURNING id, email, username, password_hash, hash_algorithm, first_name_encrypted, last_name_encrypted, phone_encrypted, email_verified, phone_verified, account_locked, failed_login_attempts, last_login_at, created_at, updated_at
`

type UpdateUserParams struct {
	ID                 uuid.UUID   `db:"id" json:"id"`
	Email              string      `db:"email" json:"email"`
	Username           pgtype.Text `db:"username" json:"username"`
	PasswordHash       string      `db:"password_hash" json:"password_hash"`
	HashAlgorithm      string      `db:"hash_algorithm" json:"hash_algorithm"`
	FirstNameEncrypted []byte      `db:"first_name_encrypted" json:"first_name_encrypted"`
	LastNameEncrypted  []byte      `db:"last_name_encrypted" json:"last_name_encrypted"`
	PhoneEncrypted     []byte      `db:"phone_encrypted" json:"phone_encrypted"`
	EmailVerified      pgtype.Bool `db:"email_verified" json:"email_verified"`
	PhoneVerified      pgtype.Bool `db:"phone_verified" json:"phone_verified"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
		arg.HashAlgorithm,
		arg.FirstNameEncrypted,
		arg.LastNameEncrypted,
		arg.PhoneEncrypted,
		arg.EmailVerified,
		arg.PhoneVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.HashAlgorithm,
		&i.FirstNameEncrypted,
		&i.LastNameEncrypted,
		&i.PhoneEncrypted,
		&i.EmailVerified,
		&i.PhoneVerified,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserLoginInfo = `-- name: UpdateUserLoginInfo :exec
UPDATE users SET
    failed_login_attempts = $2,
    account_locked = $3,
    last_login_at = $4,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUserLoginInfoParams struct {
	ID                  uuid.UUID        `db:"id" json:"id"`
	FailedLoginAttempts pgtype.Int4      `db:"failed_login_attempts" json:"failed_login_attempts"`
	AccountLocked       pgtype.Bool      `db:"account_locked" json:"account_locked"`
	LastLoginAt         pgtype.Timestamp `db:"last_login_at" json:"last_login_at"`
}

func (q *Queries) UpdateUserLoginInfo(ctx context.Context, arg UpdateUserLoginInfoParams) error {
	_, err := q.db.Exec(ctx, updateUserLoginInfo,
		arg.ID,
		arg.FailedLoginAttempts,
		arg.AccountLocked,
		arg.LastLoginAt,
	)
	return err
}
