// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: social_accounts.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSocialAccount = `-- name: CreateSocialAccount :one
INSERT INTO social_accounts (
    id, user_id, provider, social_id, email, name, access_token, refresh_token, expires_at, metadata, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, user_id, provider, social_id, email, name, access_token, refresh_token, expires_at, metadata, created_at, updated_at
`

type CreateSocialAccountParams struct {
	ID           uuid.UUID        `db:"id" json:"id"`
	UserID       uuid.UUID        `db:"user_id" json:"user_id"`
	Provider     string           `db:"provider" json:"provider"`
	SocialID     string           `db:"social_id" json:"social_id"`
	Email        pgtype.Text      `db:"email" json:"email"`
	Name         pgtype.Text      `db:"name" json:"name"`
	AccessToken  pgtype.Text      `db:"access_token" json:"access_token"`
	RefreshToken pgtype.Text      `db:"refresh_token" json:"refresh_token"`
	ExpiresAt    pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	Metadata     json.RawMessage  `db:"metadata" json:"metadata"`
	CreatedAt    pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt    pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateSocialAccount(ctx context.Context, arg CreateSocialAccountParams) (SocialAccount, error) {
	row := q.db.QueryRow(ctx, createSocialAccount,
		arg.ID,
		arg.UserID,
		arg.Provider,
		arg.SocialID,
		arg.Email,
		arg.Name,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.Metadata,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i SocialAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.SocialID,
		&i.Email,
		&i.Name,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllUserSocialAccounts = `-- name: DeleteAllUserSocialAccounts :exec
DELETE FROM social_accounts WHERE user_id = $1
`

func (q *Queries) DeleteAllUserSocialAccounts(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAllUserSocialAccounts, userID)
	return err
}

const deleteSocialAccount = `-- name: DeleteSocialAccount :exec
DELETE FROM social_accounts WHERE user_id = $1 AND provider = $2
`

type DeleteSocialAccountParams struct {
	UserID   uuid.UUID `db:"user_id" json:"user_id"`
	Provider string    `db:"provider" json:"provider"`
}

func (q *Queries) DeleteSocialAccount(ctx context.Context, arg DeleteSocialAccountParams) error {
	_, err := q.db.Exec(ctx, deleteSocialAccount, arg.UserID, arg.Provider)
	return err
}

const getSocialAccountByProviderAndSocialID = `-- name: GetSocialAccountByProviderAndSocialID :one
SELECT id, user_id, provider, social_id, email, name, access_token, refresh_token, expires_at, metadata, created_at, updated_at FROM social_accounts
WHERE provider = $1 AND social_id = $2
`

type GetSocialAccountByProviderAndSocialIDParams struct {
	Provider string `db:"provider" json:"provider"`
	SocialID string `db:"social_id" json:"social_id"`
}

func (q *Queries) GetSocialAccountByProviderAndSocialID(ctx context.Context, arg GetSocialAccountByProviderAndSocialIDParams) (SocialAccount, error) {
	row := q.db.QueryRow(ctx, getSocialAccountByProviderAndSocialID, arg.Provider, arg.SocialID)
	var i SocialAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.SocialID,
		&i.Email,
		&i.Name,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSocialAccountByUserIDAndProvider = `-- name: GetSocialAccountByUserIDAndProvider :one
SELECT id, user_id, provider, social_id, email, name, access_token, refresh_token, expires_at, metadata, created_at, updated_at FROM social_accounts
WHERE user_id = $1 AND provider = $2
`

type GetSocialAccountByUserIDAndProviderParams struct {
	UserID   uuid.UUID `db:"user_id" json:"user_id"`
	Provider string    `db:"provider" json:"provider"`
}

func (q *Queries) GetSocialAccountByUserIDAndProvider(ctx context.Context, arg GetSocialAccountByUserIDAndProviderParams) (SocialAccount, error) {
	row := q.db.QueryRow(ctx, getSocialAccountByUserIDAndProvider, arg.UserID, arg.Provider)
	var i SocialAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.SocialID,
		&i.Email,
		&i.Name,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSocialAccountsByUserID = `-- name: GetSocialAccountsByUserID :many
SELECT id, user_id, provider, social_id, email, name, access_token, refresh_token, expires_at, metadata, created_at, updated_at FROM social_accounts
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetSocialAccountsByUserID(ctx context.Context, userID uuid.UUID) ([]SocialAccount, error) {
	rows, err := q.db.Query(ctx, getSocialAccountsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SocialAccount{}
	for rows.Next() {
		var i SocialAccount
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Provider,
			&i.SocialID,
			&i.Email,
			&i.Name,
			&i.AccessToken,
			&i.RefreshToken,
			&i.ExpiresAt,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSocialAccount = `-- name: UpdateSocialAccount :exec
UPDATE social_accounts
SET email = $3, name = $4, access_token = $5, refresh_token = $6, expires_at = $7, metadata = $8, updated_at = $9
WHERE user_id = $1 AND provider = $2
`

type UpdateSocialAccountParams struct {
	UserID       uuid.UUID        `db:"user_id" json:"user_id"`
	Provider     string           `db:"provider" json:"provider"`
	Email        pgtype.Text      `db:"email" json:"email"`
	Name         pgtype.Text      `db:"name" json:"name"`
	AccessToken  pgtype.Text      `db:"access_token" json:"access_token"`
	RefreshToken pgtype.Text      `db:"refresh_token" json:"refresh_token"`
	ExpiresAt    pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	Metadata     json.RawMessage  `db:"metadata" json:"metadata"`
	UpdatedAt    pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateSocialAccount(ctx context.Context, arg UpdateSocialAccountParams) error {
	_, err := q.db.Exec(ctx, updateSocialAccount,
		arg.UserID,
		arg.Provider,
		arg.Email,
		arg.Name,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.Metadata,
		arg.UpdatedAt,
	)
	return err
}
