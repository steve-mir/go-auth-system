// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: notifications.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNotificationSettings = `-- name: CreateNotificationSettings :exec
INSERT INTO notification_settings (
    id, email_enabled, email_recipients, slack_enabled, slack_webhook,
    sms_enabled, sms_recipients, thresholds, created_at, updated_at
) VALUES (
    1, $1, $2, $3, $4, $5, $6, $7, NOW(), NOW()
)
`

type CreateNotificationSettingsParams struct {
	EmailEnabled    pgtype.Bool `db:"email_enabled" json:"email_enabled"`
	EmailRecipients []string    `db:"email_recipients" json:"email_recipients"`
	SlackEnabled    pgtype.Bool `db:"slack_enabled" json:"slack_enabled"`
	SlackWebhook    pgtype.Text `db:"slack_webhook" json:"slack_webhook"`
	SmsEnabled      pgtype.Bool `db:"sms_enabled" json:"sms_enabled"`
	SmsRecipients   []string    `db:"sms_recipients" json:"sms_recipients"`
	Thresholds      []byte      `db:"thresholds" json:"thresholds"`
}

func (q *Queries) CreateNotificationSettings(ctx context.Context, arg CreateNotificationSettingsParams) error {
	_, err := q.db.Exec(ctx, createNotificationSettings,
		arg.EmailEnabled,
		arg.EmailRecipients,
		arg.SlackEnabled,
		arg.SlackWebhook,
		arg.SmsEnabled,
		arg.SmsRecipients,
		arg.Thresholds,
	)
	return err
}

const getNotificationSettings = `-- name: GetNotificationSettings :one
SELECT 
    email_enabled, email_recipients, slack_enabled, slack_webhook,
    sms_enabled, sms_recipients, thresholds
FROM notification_settings
WHERE id = 1
`

type GetNotificationSettingsRow struct {
	EmailEnabled    pgtype.Bool `db:"email_enabled" json:"email_enabled"`
	EmailRecipients []string    `db:"email_recipients" json:"email_recipients"`
	SlackEnabled    pgtype.Bool `db:"slack_enabled" json:"slack_enabled"`
	SlackWebhook    pgtype.Text `db:"slack_webhook" json:"slack_webhook"`
	SmsEnabled      pgtype.Bool `db:"sms_enabled" json:"sms_enabled"`
	SmsRecipients   []string    `db:"sms_recipients" json:"sms_recipients"`
	Thresholds      []byte      `db:"thresholds" json:"thresholds"`
}

func (q *Queries) GetNotificationSettings(ctx context.Context) (GetNotificationSettingsRow, error) {
	row := q.db.QueryRow(ctx, getNotificationSettings)
	var i GetNotificationSettingsRow
	err := row.Scan(
		&i.EmailEnabled,
		&i.EmailRecipients,
		&i.SlackEnabled,
		&i.SlackWebhook,
		&i.SmsEnabled,
		&i.SmsRecipients,
		&i.Thresholds,
	)
	return i, err
}

const upsertNotificationSettings = `-- name: UpsertNotificationSettings :exec
INSERT INTO notification_settings (
    id, email_enabled, email_recipients, slack_enabled, slack_webhook,
    sms_enabled, sms_recipients, thresholds, updated_at
) VALUES (
    1, $1, $2, $3, $4, $5, $6, $7, NOW()
)
ON CONFLICT (id) DO UPDATE SET
    email_enabled = EXCLUDED.email_enabled,
    email_recipients = EXCLUDED.email_recipients,
    slack_enabled = EXCLUDED.slack_enabled,
    slack_webhook = EXCLUDED.slack_webhook,
    sms_enabled = EXCLUDED.sms_enabled,
    sms_recipients = EXCLUDED.sms_recipients,
    thresholds = EXCLUDED.thresholds,
    updated_at = NOW()
`

type UpsertNotificationSettingsParams struct {
	EmailEnabled    pgtype.Bool `db:"email_enabled" json:"email_enabled"`
	EmailRecipients []string    `db:"email_recipients" json:"email_recipients"`
	SlackEnabled    pgtype.Bool `db:"slack_enabled" json:"slack_enabled"`
	SlackWebhook    pgtype.Text `db:"slack_webhook" json:"slack_webhook"`
	SmsEnabled      pgtype.Bool `db:"sms_enabled" json:"sms_enabled"`
	SmsRecipients   []string    `db:"sms_recipients" json:"sms_recipients"`
	Thresholds      []byte      `db:"thresholds" json:"thresholds"`
}

func (q *Queries) UpsertNotificationSettings(ctx context.Context, arg UpsertNotificationSettingsParams) error {
	_, err := q.db.Exec(ctx, upsertNotificationSettings,
		arg.EmailEnabled,
		arg.EmailRecipients,
		arg.SlackEnabled,
		arg.SlackWebhook,
		arg.SmsEnabled,
		arg.SmsRecipients,
		arg.Thresholds,
	)
	return err
}
