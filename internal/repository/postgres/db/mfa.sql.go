// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: mfa.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countUserMFAMethods = `-- name: CountUserMFAMethods :one
SELECT COUNT(*) FROM user_mfa 
WHERE user_id = $1 AND enabled = true
`

func (q *Queries) CountUserMFAMethods(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countUserMFAMethods, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMFAConfig = `-- name: CreateMFAConfig :one
INSERT INTO user_mfa (
    user_id, method, secret_encrypted, backup_codes_encrypted, enabled
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, method, secret_encrypted, backup_codes_encrypted, enabled, created_at, last_used_at
`

type CreateMFAConfigParams struct {
	UserID               uuid.UUID   `db:"user_id" json:"user_id"`
	Method               string      `db:"method" json:"method"`
	SecretEncrypted      []byte      `db:"secret_encrypted" json:"secret_encrypted"`
	BackupCodesEncrypted []byte      `db:"backup_codes_encrypted" json:"backup_codes_encrypted"`
	Enabled              pgtype.Bool `db:"enabled" json:"enabled"`
}

func (q *Queries) CreateMFAConfig(ctx context.Context, arg CreateMFAConfigParams) (UserMfa, error) {
	row := q.db.QueryRow(ctx, createMFAConfig,
		arg.UserID,
		arg.Method,
		arg.SecretEncrypted,
		arg.BackupCodesEncrypted,
		arg.Enabled,
	)
	var i UserMfa
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Method,
		&i.SecretEncrypted,
		&i.BackupCodesEncrypted,
		&i.Enabled,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const deleteMFAConfig = `-- name: DeleteMFAConfig :exec
DELETE FROM user_mfa WHERE id = $1
`

func (q *Queries) DeleteMFAConfig(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMFAConfig, id)
	return err
}

const deleteUserMFAConfigs = `-- name: DeleteUserMFAConfigs :exec
DELETE FROM user_mfa WHERE user_id = $1
`

func (q *Queries) DeleteUserMFAConfigs(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserMFAConfigs, userID)
	return err
}

const disableMFA = `-- name: DisableMFA :exec
UPDATE user_mfa SET
    enabled = false
WHERE id = $1
`

func (q *Queries) DisableMFA(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableMFA, id)
	return err
}

const enableMFA = `-- name: EnableMFA :exec
UPDATE user_mfa SET
    enabled = true,
    last_used_at = NOW()
WHERE id = $1
`

func (q *Queries) EnableMFA(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, enableMFA, id)
	return err
}

const getEnabledMFAMethods = `-- name: GetEnabledMFAMethods :many
SELECT method FROM user_mfa 
WHERE user_id = $1 AND enabled = true
ORDER BY created_at ASC
`

func (q *Queries) GetEnabledMFAMethods(ctx context.Context, userID uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getEnabledMFAMethods, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var method string
		if err := rows.Scan(&method); err != nil {
			return nil, err
		}
		items = append(items, method)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMFAConfigByID = `-- name: GetMFAConfigByID :one
SELECT id, user_id, method, secret_encrypted, backup_codes_encrypted, enabled, created_at, last_used_at FROM user_mfa WHERE id = $1
`

func (q *Queries) GetMFAConfigByID(ctx context.Context, id uuid.UUID) (UserMfa, error) {
	row := q.db.QueryRow(ctx, getMFAConfigByID, id)
	var i UserMfa
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Method,
		&i.SecretEncrypted,
		&i.BackupCodesEncrypted,
		&i.Enabled,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const getUserMFAByMethod = `-- name: GetUserMFAByMethod :one
SELECT id, user_id, method, secret_encrypted, backup_codes_encrypted, enabled, created_at, last_used_at FROM user_mfa 
WHERE user_id = $1 AND method = $2
`

type GetUserMFAByMethodParams struct {
	UserID uuid.UUID `db:"user_id" json:"user_id"`
	Method string    `db:"method" json:"method"`
}

func (q *Queries) GetUserMFAByMethod(ctx context.Context, arg GetUserMFAByMethodParams) (UserMfa, error) {
	row := q.db.QueryRow(ctx, getUserMFAByMethod, arg.UserID, arg.Method)
	var i UserMfa
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Method,
		&i.SecretEncrypted,
		&i.BackupCodesEncrypted,
		&i.Enabled,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const getUserMFAConfigs = `-- name: GetUserMFAConfigs :many
SELECT id, user_id, method, secret_encrypted, backup_codes_encrypted, enabled, created_at, last_used_at FROM user_mfa 
WHERE user_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetUserMFAConfigs(ctx context.Context, userID uuid.UUID) ([]UserMfa, error) {
	rows, err := q.db.Query(ctx, getUserMFAConfigs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserMfa{}
	for rows.Next() {
		var i UserMfa
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Method,
			&i.SecretEncrypted,
			&i.BackupCodesEncrypted,
			&i.Enabled,
			&i.CreatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMFAConfig = `-- name: UpdateMFAConfig :one
UPDATE user_mfa SET
    secret_encrypted = COALESCE($2, secret_encrypted),
    backup_codes_encrypted = COALESCE($3, backup_codes_encrypted),
    enabled = COALESCE($4, enabled),
    last_used_at = CASE WHEN $5::boolean THEN NOW() ELSE last_used_at END
WHERE id = $1
RETURNING id, user_id, method, secret_encrypted, backup_codes_encrypted, enabled, created_at, last_used_at
`

type UpdateMFAConfigParams struct {
	ID                   uuid.UUID   `db:"id" json:"id"`
	SecretEncrypted      []byte      `db:"secret_encrypted" json:"secret_encrypted"`
	BackupCodesEncrypted []byte      `db:"backup_codes_encrypted" json:"backup_codes_encrypted"`
	Enabled              pgtype.Bool `db:"enabled" json:"enabled"`
	Column5              bool        `db:"column_5" json:"column_5"`
}

func (q *Queries) UpdateMFAConfig(ctx context.Context, arg UpdateMFAConfigParams) (UserMfa, error) {
	row := q.db.QueryRow(ctx, updateMFAConfig,
		arg.ID,
		arg.SecretEncrypted,
		arg.BackupCodesEncrypted,
		arg.Enabled,
		arg.Column5,
	)
	var i UserMfa
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Method,
		&i.SecretEncrypted,
		&i.BackupCodesEncrypted,
		&i.Enabled,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}
