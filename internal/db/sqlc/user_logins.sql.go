// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user_logins.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createUserLogin = `-- name: CreateUserLogin :one
INSERT INTO user_logins (user_id, login_at, ip_address, user_agent)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, login_at, ip_address, user_agent
`

type CreateUserLoginParams struct {
	UserID    uuid.UUID      `json:"user_id"`
	LoginAt   sql.NullTime   `json:"login_at"`
	IpAddress pqtype.Inet    `json:"ip_address"`
	UserAgent sql.NullString `json:"user_agent"`
}

// Create a new user login
func (q *Queries) CreateUserLogin(ctx context.Context, arg CreateUserLoginParams) (UserLogin, error) {
	row := q.db.QueryRowContext(ctx, createUserLogin,
		arg.UserID,
		arg.LoginAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i UserLogin
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LoginAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const deleteUserLogin = `-- name: DeleteUserLogin :exec
DELETE FROM user_logins
WHERE id = $1
`

// Delete a user login
func (q *Queries) DeleteUserLogin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserLogin, id)
	return err
}

const getAllUserLogins = `-- name: GetAllUserLogins :many
SELECT id, user_id, login_at, ip_address, user_agent FROM user_logins
LIMIT $1
`

// Get all user logins with a limit
func (q *Queries) GetAllUserLogins(ctx context.Context, limit int32) ([]UserLogin, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserLogins, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserLogin{}
	for rows.Next() {
		var i UserLogin
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LoginAt,
			&i.IpAddress,
			&i.UserAgent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLoginsByUserID = `-- name: GetUserLoginsByUserID :many
SELECT id, user_id, login_at, ip_address, user_agent FROM user_logins
WHERE user_id = $1
`

// Get user logins by user ID
func (q *Queries) GetUserLoginsByUserID(ctx context.Context, userID uuid.UUID) ([]UserLogin, error) {
	rows, err := q.db.QueryContext(ctx, getUserLoginsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserLogin{}
	for rows.Next() {
		var i UserLogin
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LoginAt,
			&i.IpAddress,
			&i.UserAgent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserLogin = `-- name: UpdateUserLogin :one
UPDATE user_logins
SET login_at = $1, ip_address = $2, user_agent = $3
WHERE id = $4
RETURNING id, user_id, login_at, ip_address, user_agent
`

type UpdateUserLoginParams struct {
	LoginAt   sql.NullTime   `json:"login_at"`
	IpAddress pqtype.Inet    `json:"ip_address"`
	UserAgent sql.NullString `json:"user_agent"`
	ID        int32          `json:"id"`
}

// Update a user login
func (q *Queries) UpdateUserLogin(ctx context.Context, arg UpdateUserLoginParams) (UserLogin, error) {
	row := q.db.QueryRowContext(ctx, updateUserLogin,
		arg.LoginAt,
		arg.IpAddress,
		arg.UserAgent,
		arg.ID,
	)
	var i UserLogin
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LoginAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}
