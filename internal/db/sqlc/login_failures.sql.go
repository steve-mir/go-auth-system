// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: login_failures.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const createLoginFailure = `-- name: CreateLoginFailure :one
INSERT INTO login_failures (email, timestamp, user_agent, ip_address)
VALUES ($1, $2, $3, $4) RETURNING id, email, timestamp, user_agent, ip_address
`

type CreateLoginFailureParams struct {
	Email     string         `json:"email"`
	Timestamp sql.NullTime   `json:"timestamp"`
	UserAgent sql.NullString `json:"user_agent"`
	IpAddress pqtype.Inet    `json:"ip_address"`
}

// Create a new login failure
func (q *Queries) CreateLoginFailure(ctx context.Context, arg CreateLoginFailureParams) (LoginFailure, error) {
	row := q.db.QueryRowContext(ctx, createLoginFailure,
		arg.Email,
		arg.Timestamp,
		arg.UserAgent,
		arg.IpAddress,
	)
	var i LoginFailure
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Timestamp,
		&i.UserAgent,
		&i.IpAddress,
	)
	return i, err
}

const deleteLoginFailure = `-- name: DeleteLoginFailure :exec
DELETE FROM login_failures
WHERE id = $1
`

// Delete a login failure
func (q *Queries) DeleteLoginFailure(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteLoginFailure, id)
	return err
}

const getAllLoginFailures = `-- name: GetAllLoginFailures :many
SELECT id, email, timestamp, user_agent, ip_address FROM login_failures
LIMIT $1
`

// Get all login failures with a limit
func (q *Queries) GetAllLoginFailures(ctx context.Context, limit int32) ([]LoginFailure, error) {
	rows, err := q.db.QueryContext(ctx, getAllLoginFailures, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LoginFailure{}
	for rows.Next() {
		var i LoginFailure
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Timestamp,
			&i.UserAgent,
			&i.IpAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLoginFailuresByUserID = `-- name: GetLoginFailuresByUserID :many
SELECT id, email, timestamp, user_agent, ip_address FROM login_failures
WHERE email = $1
`

// Get login failures by user ID
func (q *Queries) GetLoginFailuresByUserID(ctx context.Context, email string) ([]LoginFailure, error) {
	rows, err := q.db.QueryContext(ctx, getLoginFailuresByUserID, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LoginFailure{}
	for rows.Next() {
		var i LoginFailure
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Timestamp,
			&i.UserAgent,
			&i.IpAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLoginFailure = `-- name: UpdateLoginFailure :one
UPDATE login_failures
SET timestamp = $1, user_agent = $2, ip_address = $3
WHERE id = $4 RETURNING id, email, timestamp, user_agent, ip_address
`

type UpdateLoginFailureParams struct {
	Timestamp sql.NullTime   `json:"timestamp"`
	UserAgent sql.NullString `json:"user_agent"`
	IpAddress pqtype.Inet    `json:"ip_address"`
	ID        int32          `json:"id"`
}

// Update a login failure
func (q *Queries) UpdateLoginFailure(ctx context.Context, arg UpdateLoginFailureParams) (LoginFailure, error) {
	row := q.db.QueryRowContext(ctx, updateLoginFailure,
		arg.Timestamp,
		arg.UserAgent,
		arg.IpAddress,
		arg.ID,
	)
	var i LoginFailure
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Timestamp,
		&i.UserAgent,
		&i.IpAddress,
	)
	return i, err
}
