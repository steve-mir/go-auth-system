// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: security_questions.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSecurityQuestion = `-- name: CreateSecurityQuestion :one
INSERT INTO security_questions (user_id, question, answer, expired_at)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, question, answer, expired_at
`

type CreateSecurityQuestionParams struct {
	UserID    uuid.UUID      `json:"user_id"`
	Question  sql.NullString `json:"question"`
	Answer    sql.NullString `json:"answer"`
	ExpiredAt sql.NullTime   `json:"expired_at"`
}

// Create a new security question
func (q *Queries) CreateSecurityQuestion(ctx context.Context, arg CreateSecurityQuestionParams) (SecurityQuestion, error) {
	row := q.db.QueryRowContext(ctx, createSecurityQuestion,
		arg.UserID,
		arg.Question,
		arg.Answer,
		arg.ExpiredAt,
	)
	var i SecurityQuestion
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Question,
		&i.Answer,
		&i.ExpiredAt,
	)
	return i, err
}

const deleteSecurityQuestion = `-- name: DeleteSecurityQuestion :exec
DELETE FROM security_questions
WHERE id = $1
`

// Delete a security question
func (q *Queries) DeleteSecurityQuestion(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSecurityQuestion, id)
	return err
}

const getAllSecurityQuestions = `-- name: GetAllSecurityQuestions :many
SELECT id, user_id, question, answer, expired_at FROM security_questions
LIMIT $1
`

// Get all security questions with a limit
func (q *Queries) GetAllSecurityQuestions(ctx context.Context, limit int32) ([]SecurityQuestion, error) {
	rows, err := q.db.QueryContext(ctx, getAllSecurityQuestions, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SecurityQuestion{}
	for rows.Next() {
		var i SecurityQuestion
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Question,
			&i.Answer,
			&i.ExpiredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSecurityQuestionsByUserID = `-- name: GetSecurityQuestionsByUserID :many
SELECT id, user_id, question, answer, expired_at FROM security_questions
WHERE user_id = $1
`

// Get security questions by user ID
func (q *Queries) GetSecurityQuestionsByUserID(ctx context.Context, userID uuid.UUID) ([]SecurityQuestion, error) {
	rows, err := q.db.QueryContext(ctx, getSecurityQuestionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SecurityQuestion{}
	for rows.Next() {
		var i SecurityQuestion
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Question,
			&i.Answer,
			&i.ExpiredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSecurityQuestion = `-- name: UpdateSecurityQuestion :one
UPDATE security_questions
SET question = $1, answer = $2, expired_at = $3
WHERE id = $4
RETURNING id, user_id, question, answer, expired_at
`

type UpdateSecurityQuestionParams struct {
	Question  sql.NullString `json:"question"`
	Answer    sql.NullString `json:"answer"`
	ExpiredAt sql.NullTime   `json:"expired_at"`
	ID        int32          `json:"id"`
}

// Update a security question
func (q *Queries) UpdateSecurityQuestion(ctx context.Context, arg UpdateSecurityQuestionParams) (SecurityQuestion, error) {
	row := q.db.QueryRowContext(ctx, updateSecurityQuestion,
		arg.Question,
		arg.Answer,
		arg.ExpiredAt,
		arg.ID,
	)
	var i SecurityQuestion
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Question,
		&i.Answer,
		&i.ExpiredAt,
	)
	return i, err
}
