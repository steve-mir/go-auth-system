// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: banned_users.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBannedUser = `-- name: CreateBannedUser :one
INSERT INTO banned_users (user_id, banned_at, reason)
VALUES ($1, $2, $3) RETURNING id, user_id, banned_at, reason
`

type CreateBannedUserParams struct {
	UserID   uuid.UUID      `json:"user_id"`
	BannedAt sql.NullTime   `json:"banned_at"`
	Reason   sql.NullString `json:"reason"`
}

// Create a new banned user
func (q *Queries) CreateBannedUser(ctx context.Context, arg CreateBannedUserParams) (BannedUser, error) {
	row := q.db.QueryRowContext(ctx, createBannedUser, arg.UserID, arg.BannedAt, arg.Reason)
	var i BannedUser
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BannedAt,
		&i.Reason,
	)
	return i, err
}

const deleteBannedUser = `-- name: DeleteBannedUser :exec
DELETE FROM banned_users
WHERE id = $1
`

// Delete a banned user
func (q *Queries) DeleteBannedUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBannedUser, id)
	return err
}

const getAllBannedUsers = `-- name: GetAllBannedUsers :many
SELECT id, user_id, banned_at, reason FROM banned_users
LIMIT $1
`

// Get all banned users with a limit
func (q *Queries) GetAllBannedUsers(ctx context.Context, limit int32) ([]BannedUser, error) {
	rows, err := q.db.QueryContext(ctx, getAllBannedUsers, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BannedUser{}
	for rows.Next() {
		var i BannedUser
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BannedAt,
			&i.Reason,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBannedUsersByUserID = `-- name: GetBannedUsersByUserID :many
SELECT id, user_id, banned_at, reason FROM banned_users
WHERE user_id = $1
`

// Get banned users by user ID
func (q *Queries) GetBannedUsersByUserID(ctx context.Context, userID uuid.UUID) ([]BannedUser, error) {
	rows, err := q.db.QueryContext(ctx, getBannedUsersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BannedUser{}
	for rows.Next() {
		var i BannedUser
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BannedAt,
			&i.Reason,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBannedUser = `-- name: UpdateBannedUser :one
UPDATE banned_users
SET banned_at = $1, reason = $2
WHERE id = $3 RETURNING id, user_id, banned_at, reason
`

type UpdateBannedUserParams struct {
	BannedAt sql.NullTime   `json:"banned_at"`
	Reason   sql.NullString `json:"reason"`
	ID       int32          `json:"id"`
}

// Update a banned user
func (q *Queries) UpdateBannedUser(ctx context.Context, arg UpdateBannedUserParams) (BannedUser, error) {
	row := q.db.QueryRowContext(ctx, updateBannedUser, arg.BannedAt, arg.Reason, arg.ID)
	var i BannedUser
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BannedAt,
		&i.Reason,
	)
	return i, err
}
