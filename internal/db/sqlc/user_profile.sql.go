// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user_profile.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUserProfile = `-- name: CreateUserProfile :exec
INSERT INTO user_profiles (
    user_id, first_name, last_name, phone, image_url
    )
VALUES ($1, $2, $3, $4, $5)
`

type CreateUserProfileParams struct {
	UserID    uuid.UUID      `json:"user_id"`
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	Phone     sql.NullString `json:"phone"`
	ImageUrl  sql.NullString `json:"image_url"`
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, createUserProfile,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.ImageUrl,
	)
	return err
}

const deleteUserProfileByID = `-- name: DeleteUserProfileByID :exec
DELETE FROM user_profiles WHERE user_id = $1
`

func (q *Queries) DeleteUserProfileByID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserProfileByID, userID)
	return err
}

const getUserProfileByUID = `-- name: GetUserProfileByUID :one
SELECT id, user_id, first_name, last_name, phone, image_url FROM user_profiles WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserProfileByUID(ctx context.Context, userID uuid.UUID) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileByUID, userID)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.ImageUrl,
	)
	return i, err
}

const updateUserPhone = `-- name: UpdateUserPhone :exec
UPDATE user_profiles
SET phone = $2
WHERE user_id = $1
`

type UpdateUserPhoneParams struct {
	UserID uuid.UUID      `json:"user_id"`
	Phone  sql.NullString `json:"phone"`
}

func (q *Queries) UpdateUserPhone(ctx context.Context, arg UpdateUserPhoneParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPhone, arg.UserID, arg.Phone)
	return err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
UPDATE user_profiles
SET first_name = $2, last_name = $3
WHERE user_id = $1
`

type UpdateUserProfileParams struct {
	UserID    uuid.UUID      `json:"user_id"`
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfile, arg.UserID, arg.FirstName, arg.LastName)
	return err
}

const updateUserProfileImg = `-- name: UpdateUserProfileImg :exec
UPDATE user_profiles
SET image_url = $2
WHERE user_id = $1
`

type UpdateUserProfileImgParams struct {
	UserID   uuid.UUID      `json:"user_id"`
	ImageUrl sql.NullString `json:"image_url"`
}

func (q *Queries) UpdateUserProfileImg(ctx context.Context, arg UpdateUserProfileImgParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfileImg, arg.UserID, arg.ImageUrl)
	return err
}
