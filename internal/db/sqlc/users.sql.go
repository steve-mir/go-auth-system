// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, name, email, username, password_hash, created_at,
    updated_at, is_suspended, is_deleted,
    login_attempts, lockout_duration, lockout_until,
    password_changed_at, is_verified
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
RETURNING id, name, email, username, password_hash, created_at, updated_at, is_suspended, is_verified, is_email_verified, is_deleted, login_attempts, lockout_duration, lockout_until, password_changed_at, deleted_at, suspended_at, email_verified_at
`

type CreateUserParams struct {
	ID                uuid.UUID      `json:"id"`
	Name              sql.NullString `json:"name"`
	Email             string         `json:"email"`
	Username          sql.NullString `json:"username"`
	PasswordHash      string         `json:"password_hash"`
	CreatedAt         sql.NullTime   `json:"created_at"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
	IsSuspended       sql.NullBool   `json:"is_suspended"`
	IsDeleted         bool           `json:"is_deleted"`
	LoginAttempts     sql.NullInt32  `json:"login_attempts"`
	LockoutDuration   sql.NullInt32  `json:"lockout_duration"`
	LockoutUntil      sql.NullTime   `json:"lockout_until"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	IsVerified        sql.NullBool   `json:"is_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsSuspended,
		arg.IsDeleted,
		arg.LoginAttempts,
		arg.LockoutDuration,
		arg.LockoutUntil,
		arg.PasswordChangedAt,
		arg.IsVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsSuspended,
		&i.IsVerified,
		&i.IsEmailVerified,
		&i.IsDeleted,
		&i.LoginAttempts,
		&i.LockoutDuration,
		&i.LockoutUntil,
		&i.PasswordChangedAt,
		&i.DeletedAt,
		&i.SuspendedAt,
		&i.EmailVerifiedAt,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, username, password_hash, created_at, updated_at, is_suspended, is_verified, is_email_verified, is_deleted, login_attempts, lockout_duration, lockout_until, password_changed_at, deleted_at, suspended_at, email_verified_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsSuspended,
		&i.IsVerified,
		&i.IsEmailVerified,
		&i.IsDeleted,
		&i.LoginAttempts,
		&i.LockoutDuration,
		&i.LockoutUntil,
		&i.PasswordChangedAt,
		&i.DeletedAt,
		&i.SuspendedAt,
		&i.EmailVerifiedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, username, password_hash, created_at, updated_at, is_suspended, is_verified, is_email_verified, is_deleted, login_attempts, lockout_duration, lockout_until, password_changed_at, deleted_at, suspended_at, email_verified_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsSuspended,
		&i.IsVerified,
		&i.IsEmailVerified,
		&i.IsDeleted,
		&i.LoginAttempts,
		&i.LockoutDuration,
		&i.LockoutUntil,
		&i.PasswordChangedAt,
		&i.DeletedAt,
		&i.SuspendedAt,
		&i.EmailVerifiedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, name, email, username, password_hash, created_at, updated_at, is_suspended, is_verified, is_email_verified, is_deleted, login_attempts, lockout_duration, lockout_until, password_changed_at, deleted_at, suspended_at, email_verified_at FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsSuspended,
		&i.IsVerified,
		&i.IsEmailVerified,
		&i.IsDeleted,
		&i.LoginAttempts,
		&i.LockoutDuration,
		&i.LockoutUntil,
		&i.PasswordChangedAt,
		&i.DeletedAt,
		&i.SuspendedAt,
		&i.EmailVerifiedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $2, email = $3, username = $4, password_hash = $5, updated_at = $6, is_suspended = $7, is_deleted = $8, login_attempts = $9, lockout_duration = $10, lockout_until = $11
WHERE id = $1
`

type UpdateUserParams struct {
	ID              uuid.UUID      `json:"id"`
	Name            sql.NullString `json:"name"`
	Email           string         `json:"email"`
	Username        sql.NullString `json:"username"`
	PasswordHash    string         `json:"password_hash"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
	IsSuspended     sql.NullBool   `json:"is_suspended"`
	IsDeleted       bool           `json:"is_deleted"`
	LoginAttempts   sql.NullInt32  `json:"login_attempts"`
	LockoutDuration sql.NullInt32  `json:"lockout_duration"`
	LockoutUntil    sql.NullTime   `json:"lockout_until"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
		arg.UpdatedAt,
		arg.IsSuspended,
		arg.IsDeleted,
		arg.LoginAttempts,
		arg.LockoutDuration,
		arg.LockoutUntil,
	)
	return err
}

const updateUserEmailVerified = `-- name: UpdateUserEmailVerified :exec
UPDATE users
SET is_email_verified = $3,
email_verified_at = $2
WHERE id = $1
`

type UpdateUserEmailVerifiedParams struct {
	ID              uuid.UUID    `json:"id"`
	EmailVerifiedAt sql.NullTime `json:"email_verified_at"`
	IsEmailVerified sql.NullBool `json:"is_email_verified"`
}

func (q *Queries) UpdateUserEmailVerified(ctx context.Context, arg UpdateUserEmailVerifiedParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmailVerified, arg.ID, arg.EmailVerifiedAt, arg.IsEmailVerified)
	return err
}

const updateUserSuspension = `-- name: UpdateUserSuspension :exec
UPDATE users
SET is_suspended = $3, suspended_at = $2
WHERE id = $1
`

type UpdateUserSuspensionParams struct {
	ID          uuid.UUID    `json:"id"`
	SuspendedAt sql.NullTime `json:"suspended_at"`
	IsSuspended sql.NullBool `json:"is_suspended"`
}

func (q *Queries) UpdateUserSuspension(ctx context.Context, arg UpdateUserSuspensionParams) error {
	_, err := q.db.ExecContext(ctx, updateUserSuspension, arg.ID, arg.SuspendedAt, arg.IsSuspended)
	return err
}
