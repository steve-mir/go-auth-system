// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: email_verification.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createEmailVerificationRequest = `-- name: CreateEmailVerificationRequest :exec
INSERT INTO email_verification_requests (user_id, email, token, is_verified, expires_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateEmailVerificationRequestParams struct {
	UserID     uuid.UUID    `json:"user_id"`
	Email      string       `json:"email"`
	Token      string       `json:"token"`
	IsVerified sql.NullBool `json:"is_verified"`
	ExpiresAt  time.Time    `json:"expires_at"`
}

func (q *Queries) CreateEmailVerificationRequest(ctx context.Context, arg CreateEmailVerificationRequestParams) error {
	_, err := q.db.ExecContext(ctx, createEmailVerificationRequest,
		arg.UserID,
		arg.Email,
		arg.Token,
		arg.IsVerified,
		arg.ExpiresAt,
	)
	return err
}

const deleteEmailVerificationRequestByID = `-- name: DeleteEmailVerificationRequestByID :exec
DELETE FROM email_verification_requests WHERE id = $1
`

func (q *Queries) DeleteEmailVerificationRequestByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmailVerificationRequestByID, id)
	return err
}

const getEmailVerificationRequestByID = `-- name: GetEmailVerificationRequestByID :one
SELECT id, user_id, email, token, is_verified, created_at, expires_at FROM email_verification_requests WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmailVerificationRequestByID(ctx context.Context, id int64) (EmailVerificationRequest, error) {
	row := q.db.QueryRowContext(ctx, getEmailVerificationRequestByID, id)
	var i EmailVerificationRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Token,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getEmailVerificationRequestByToken = `-- name: GetEmailVerificationRequestByToken :one
SELECT id, user_id, email, token, is_verified, created_at, expires_at FROM email_verification_requests WHERE token = $1 LIMIT 1
`

func (q *Queries) GetEmailVerificationRequestByToken(ctx context.Context, token string) (EmailVerificationRequest, error) {
	row := q.db.QueryRowContext(ctx, getEmailVerificationRequestByToken, token)
	var i EmailVerificationRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Token,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const updateByToken = `-- name: UpdateByToken :exec
UPDATE email_verification_requests SET is_verified = $1 WHERE token = $2
`

type UpdateByTokenParams struct {
	IsVerified sql.NullBool `json:"is_verified"`
	Token      string       `json:"token"`
}

func (q *Queries) UpdateByToken(ctx context.Context, arg UpdateByTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateByToken, arg.IsVerified, arg.Token)
	return err
}

const updateEmailVerificationRequest = `-- name: UpdateEmailVerificationRequest :exec
UPDATE email_verification_requests SET is_verified = $1, expires_at = $2 WHERE id = $3
`

type UpdateEmailVerificationRequestParams struct {
	IsVerified sql.NullBool `json:"is_verified"`
	ExpiresAt  time.Time    `json:"expires_at"`
	ID         int64        `json:"id"`
}

func (q *Queries) UpdateEmailVerificationRequest(ctx context.Context, arg UpdateEmailVerificationRequestParams) error {
	_, err := q.db.ExecContext(ctx, updateEmailVerificationRequest, arg.IsVerified, arg.ExpiresAt, arg.ID)
	return err
}
