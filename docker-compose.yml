services:
  # PostgreSQL Database
  postgres:
    image: postgres:16.0-alpine3.18
    container_name: go-auth-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth_system
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth-network

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    container_name: go-auth-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth-network

  # Go Auth System Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-auth-system
    ports:
      - "8080:8080"  # REST API
      - "9090:9090"  # gRPC API
      - "8081:8081"  # Metrics
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: auth_system
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_SSL_MODE: disable
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Security
      JWT_SIGNING_KEY: development-signing-key-change-in-production
      ENCRYPTION_MASTER_KEY: development-encryption-key-32-chars
      
      # Features
      ADMIN_DASHBOARD_ENABLED: "true"
      MONITORING_ENABLED: "true"
      
      # Environment
      ENVIRONMENT: development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - auth-network
    restart: unless-stopped

  # Prometheus (Optional - for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: go-auth-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/go-auth-system-alerts.yml:/etc/prometheus/go-auth-system-alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - auth-network
    profiles:
      - monitoring

  # Grafana (Optional - for monitoring dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: go-auth-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources/prometheus.yml:/etc/grafana/provisioning/datasources/prometheus.yml
    networks:
      - auth-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  auth-network:
    driver: bridge